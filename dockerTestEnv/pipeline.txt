
pipeline {
    agent any

    environment {
        GIT_REPO_URL = 'https://github.com/GCNiraj/legal_aid_center.git'
        BRANCH = 'test'
        APP_PORT = '4001'
        SONAR_PROJECT_KEY = 'Puru54_legal_aid_center'
        SONAR_HOST_URL = 'https://sonarcloud.io'
        SONAR_LOGIN = 'bff6432e15005f87484ac1c4c80cffe3eb4883c6'
    }

    stages {
        stage('Clone Repository') {
            steps {
                script {
                    echo 'Cloning the repository...'
                    git branch: "${BRANCH}", url: "${GIT_REPO_URL}"
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    echo 'Installing dependencies...'
                    sh '''
                    npm install
                    '''
                }
            }
        }

       

        stage('SonarCloud Analysis') {
            steps {
                withSonarQubeEnv('sonarcloud') {
                    script {
                        sh '''
                        sonar-scanner \
                          -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                          -Dsonar.organization=puru54 \
                          -Dsonar.sources=. \
                          -Dsonar.host.url=${SONAR_HOST_URL} \
                          -Dsonar.login=${SONAR_LOGIN}
                        '''
                    }
                }
            }
        }

        stage('Start Application') {
            steps {
                script {
                    echo 'Starting the application...'
                    sh '''
                    npm start &
                    '''
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up...'
            sh '''
            pkill -f "npm start" || true
            '''
        }
        success {
            echo 'Application started and SonarCloud analysis completed successfully!'
        }
        failure {
            echo 'Pipeline failed. Check the logs for errors.'
        }
    }
}
